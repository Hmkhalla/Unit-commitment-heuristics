reset;
model unit_commitment.mod;
data Data-files/10_24_0_w.dat;

option relax_integrality 1;

option solver cplex;
solve;


printf "#####################################################################\n";
printf "##   Continious relaxation optimal solution: of = %f, time = %f   ###\n", cost_function, _total_solve_time;
printf "#####################################################################\n"; 



set ratios := {0, 0.1, 0.25, 0.5};

param v_{j in J, t in T}; 
param p_{j in J, t in T};
param p_max_{j in J, t in T};
param y_{j in J, t in T};
param z_{j in J, t in T};

let {j in J, t in T} v_[j,t]:=v[j,t];
let {j in J, t in T} p_[j,t]:=p[j,t];
let {j in J, t in T} p_max_[j,t]:=p_max[j,t];
let {j in J, t in T} y_[j,t]:=y[j,t];
let {j in J, t in T} z_[j,t]:=z[j,t];

param n_fix;
for {ratio in ratios}{
	let n_fix := 0;
	for {j in J, t in T}{
		if v_[j, t] * p_[j, t] >= p_min_bound[j] + ratio *(p_max_bound[j] - p_min_bound[j]) then {
			fix v[j, t] := 1;
			let n_fix := n_fix+1;
		}else{
			let v[j,t] := v_[j,t]; 	
		}
	}
	let {j in J, t in T} p[j,t]:= p_[j,t];		
	let {j in J, t in T} p_max[j,t] := p_max_[j,t];
	let {j in J, t in T} y[j,t] := y_[j,t];
	let {j in J, t in T} z[j,t] := z_[j,t];
	
	option relax_integrality 0;

	solve;
	
	printf "#####################################################################\n";
	printf "##   Final solution: of = %f, ratio = %f, fix = %d, time = %f   ###\n", cost_function, ratio, n_fix, _total_solve_time;
	printf "#####################################################################\n"; 
	
	#display _total_solve_time;
	#display cost_function;
}

